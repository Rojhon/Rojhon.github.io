import{d as Me}from"../chunks/environment.9aa685ef.js";import{S as Te,i as Ue,s as Ge,k as i,a as o,q as m,M as Fe,l as s,h as n,c as l,m as c,r as g,n as r,E as P,F as e,b as Ie,G as ce}from"../chunks/index.e6dcfca6.js";const Ce=Me,xe=!0,Ke=Object.freeze(Object.defineProperty({__proto__:null,csr:Ce,prerender:xe},Symbol.toStringTag,{value:"Module"})),Be=""+new URL("../assets/sorting-algorithm-visualizer.5cf4d697.png",import.meta.url).href,Le=""+new URL("../assets/sorting-algorithm-visualizer2.404d28d0.png",import.meta.url).href,He=""+new URL("../assets/barangay1.257de802.png",import.meta.url).href,Ve=""+new URL("../assets/barangay2.1ee97e1f.png",import.meta.url).href,qe=""+new URL("../assets/biology.8dfc7ce3.png",import.meta.url).href,Je=""+new URL("../assets/cpu-scheduler.26d9f396.png",import.meta.url).href;function Ne(je){let u,F,t,k,C,x,R,h,B,L,z,H,V,p,me,q,J,N,f,ge,O,A,v,D,K,I,Q,W,y,ue,X,Y,Z,b,de,$,j,_,ee,te,M,ae,re,w,he,ie,T,S,se,ne,U,oe,le,E,pe;return{c(){u=i("meta"),F=o(),t=i("div"),k=i("h1"),C=m("My Projects"),x=o(),R=i("h3"),h=i("a"),B=m("Sorting Algorithm Visualizer in Godot"),L=o(),z=i("p"),H=m("A side project I did before for fun and learning. A sorting algorithm visualizer is like a tool that can show you how certain sorting algorithms work through animation. I implemented four different types of sorting algorithms in this side project of mine: bubble sort, insertion sort, gnome sort, and selection sort."),V=o(),p=i("img"),q=o(),J=i("br"),N=o(),f=i("img"),O=o(),A=i("h3"),v=i("a"),D=m("Barangay System"),K=o(),I=i("p"),Q=m("I developed a barangay system utilizing the MERN stack, with the aim of enhancing administrative processes and community services for multiple barangays. The system encompasses a user-friendly web-based interface, allowing efficient management of resident records, report generation, and facilitation of various barangay activities. Furthermore, a document management system was implemented to streamline the handling of barangay clearances, permits, and other official documents, resulting in a remarkable 70% reduction in paperwork."),W=o(),y=i("img"),X=o(),Y=i("br"),Z=o(),b=i("img"),$=o(),j=i("h3"),_=i("a"),ee=m("Biology Learning Platform"),te=o(),M=i("p"),ae=m("I developed a biology learning platform using the MERN stack, aiming to deliver an interactive and modular learning experience for students. The platform features a design that allows users to select specific topics or modules of interest, enabling personalized learning. To enhance engagement, a diverse range of interactive learning materials and quizzes were created. Additionally, a progress tracking feature was integrated to monitor students' learning journeys, ensuring a comprehensive understanding of the subject matter."),re=o(),w=i("img"),ie=o(),T=i("h3"),S=i("a"),se=m("CPU Scheduler Calculator"),ne=o(),U=i("p"),oe=m("I developed a CPU scheduler calculator application using React.js, which incorporates various CPU scheduling algorithms such as Priority (non-preemptive), Shortest Remaining Time First (SRTF) (preemptive), and Shortest Job First (SJF) (non-preemptive). The application also includes the ability to calculate and display the average waiting time and turnaround time on Gantt charts."),le=o(),E=i("img"),this.h()},l(d){const G=Fe("svelte-tiberx",document.head);u=s(G,"META",{name:!0,content:!0}),G.forEach(n),F=l(d),t=s(d,"DIV",{class:!0});var a=c(t);k=s(a,"H1",{});var fe=c(k);C=g(fe,"My Projects"),fe.forEach(n),x=l(a),R=s(a,"H3",{});var ve=c(R);h=s(ve,"A",{href:!0,target:!0});var ye=c(h);B=g(ye,"Sorting Algorithm Visualizer in Godot"),ye.forEach(n),ve.forEach(n),L=l(a),z=s(a,"P",{});var be=c(z);H=g(be,"A side project I did before for fun and learning. A sorting algorithm visualizer is like a tool that can show you how certain sorting algorithms work through animation. I implemented four different types of sorting algorithms in this side project of mine: bubble sort, insertion sort, gnome sort, and selection sort."),be.forEach(n),V=l(a),p=s(a,"IMG",{src:!0,alt:!0,class:!0}),q=l(a),J=s(a,"BR",{}),N=l(a),f=s(a,"IMG",{src:!0,alt:!0,class:!0}),O=l(a),A=s(a,"H3",{});var _e=c(A);v=s(_e,"A",{href:!0,target:!0});var we=c(v);D=g(we,"Barangay System"),we.forEach(n),_e.forEach(n),K=l(a),I=s(a,"P",{});var Se=c(I);Q=g(Se,"I developed a barangay system utilizing the MERN stack, with the aim of enhancing administrative processes and community services for multiple barangays. The system encompasses a user-friendly web-based interface, allowing efficient management of resident records, report generation, and facilitation of various barangay activities. Furthermore, a document management system was implemented to streamline the handling of barangay clearances, permits, and other official documents, resulting in a remarkable 70% reduction in paperwork."),Se.forEach(n),W=l(a),y=s(a,"IMG",{src:!0,alt:!0,class:!0}),X=l(a),Y=s(a,"BR",{}),Z=l(a),b=s(a,"IMG",{src:!0,alt:!0,class:!0}),$=l(a),j=s(a,"H3",{});var Ee=c(j);_=s(Ee,"A",{href:!0,target:!0});var Pe=c(_);ee=g(Pe,"Biology Learning Platform"),Pe.forEach(n),Ee.forEach(n),te=l(a),M=s(a,"P",{});var ke=c(M);ae=g(ke,"I developed a biology learning platform using the MERN stack, aiming to deliver an interactive and modular learning experience for students. The platform features a design that allows users to select specific topics or modules of interest, enabling personalized learning. To enhance engagement, a diverse range of interactive learning materials and quizzes were created. Additionally, a progress tracking feature was integrated to monitor students' learning journeys, ensuring a comprehensive understanding of the subject matter."),ke.forEach(n),re=l(a),w=s(a,"IMG",{src:!0,alt:!0,class:!0}),ie=l(a),T=s(a,"H3",{});var Re=c(T);S=s(Re,"A",{href:!0,target:!0});var ze=c(S);se=g(ze,"CPU Scheduler Calculator"),ze.forEach(n),Re.forEach(n),ne=l(a),U=s(a,"P",{});var Ae=c(U);oe=g(Ae,"I developed a CPU scheduler calculator application using React.js, which incorporates various CPU scheduling algorithms such as Priority (non-preemptive), Shortest Remaining Time First (SRTF) (preemptive), and Shortest Job First (SJF) (non-preemptive). The application also includes the ability to calculate and display the average waiting time and turnaround time on Gantt charts."),Ae.forEach(n),le=l(a),E=s(a,"IMG",{src:!0,alt:!0,class:!0}),a.forEach(n),this.h()},h(){document.title="Projects",r(u,"name","description"),r(u,"content","About this app"),r(h,"href","https://github.com/Rojhon/Sorting-Algorithm-Visualizer-in-Godot"),r(h,"target","_blank"),P(p.src,me=Be)||r(p,"src",me),r(p,"alt","Sorting Algorithm Visualizer"),r(p,"class","svelte-wclivr"),P(f.src,ge=Le)||r(f,"src",ge),r(f,"alt","Sorting Algorithm Visualizer"),r(f,"class","svelte-wclivr"),r(v,"href","https://mitivelane-test.online/"),r(v,"target","_blank"),P(y.src,ue=He)||r(y,"src",ue),r(y,"alt","Barangay System"),r(y,"class","svelte-wclivr"),P(b.src,de=Ve)||r(b,"src",de),r(b,"alt","Barangay System"),r(b,"class","svelte-wclivr"),r(_,"href","https://genbioscope.netlify.app/"),r(_,"target","_blank"),P(w.src,he=qe)||r(w,"src",he),r(w,"alt","Biology"),r(w,"class","svelte-wclivr"),r(S,"href","https://github.com/Locality-PH/cpu_scheduler"),r(S,"target","_blank"),P(E.src,pe=Je)||r(E,"src",pe),r(E,"alt","CPU Scheduler"),r(E,"class","svelte-wclivr"),r(t,"class","text-column")},m(d,G){e(document.head,u),Ie(d,F,G),Ie(d,t,G),e(t,k),e(k,C),e(t,x),e(t,R),e(R,h),e(h,B),e(t,L),e(t,z),e(z,H),e(t,V),e(t,p),e(t,q),e(t,J),e(t,N),e(t,f),e(t,O),e(t,A),e(A,v),e(v,D),e(t,K),e(t,I),e(I,Q),e(t,W),e(t,y),e(t,X),e(t,Y),e(t,Z),e(t,b),e(t,$),e(t,j),e(j,_),e(_,ee),e(t,te),e(t,M),e(M,ae),e(t,re),e(t,w),e(t,ie),e(t,T),e(T,S),e(S,se),e(t,ne),e(t,U),e(U,oe),e(t,le),e(t,E)},p:ce,i:ce,o:ce,d(d){n(u),d&&n(F),d&&n(t)}}}class Qe extends Te{constructor(u){super(),Ue(this,u,null,Ne,Ge,{})}}export{Qe as component,Ke as universal};
